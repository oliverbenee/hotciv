This is a list of test methods in the associated test TestAlphaCiv:

shouldBeRedAsStartingPlayer():                                                          Ensure, that player red is the first in turn.
playerRedHasACityAt1Point1():                                                           Ensure, that player red has a city at the position (1,1).
blueHasACityAt4Point1():                                                                Ensure, that player blue has a city at the position (4,1).
ensureBlueIsNext():                                                                     Ensure, that after player red has finished his turn, it is blue that is in turn.
redShouldWinInYear3000BC():                                                             Ensure, that player red wins in year 3000 BC (or year -3000).
gameShouldStartAtYear4000BC():                                                          Ensure, that the game age starts at year 4000 BC (or year -4000).
gameAdvances100YearsEachTurn():                                                         Ensure, that the game age advances by 100 years each turn.
noWinnerIsFoundBeforeYear3000BC():                                                      Ensure, that a winner is not found before year 3000 BC (or year -3000).
populationOfCitiesIsAlways1():                                                          Ensure, that the population size of a city is always 1.
citiesShouldProduce6ProductionPerRound():                                               Ensure, that cities produce 6 production per round.
ensureThatThereIsOceanAt1Point0():                                                      Ensure, that there is an Ocean tile at (1,0).
ensureThatThereIsAHillsTileAt0Point1():                                                 Ensure, that there is a Hills tile at (0,1).
ensureThatThereIsAMountainsTileAt2Point2():                                             Ensure, that there is a Mountains tile at (2,2).
redHasAnArcherAt2Point0():                                                              Ensure, that player red has an archer at (2,0).
blueHasALegionAt3Point2():                                                              Ensure, that player blue has a legion at (3,2).
redHasASettlerAt4Point3():                                                              Ensure, that player red has a settler at (4,3).
blueCannotMoveRedsUnits():                                                              Ensure, that player blue cannot move player red's units.
onlyOneUnitAtATileAtATime():                                                            Ensure, that there is only one unit on a tile at a given time.
attackingUnitAlwaysWins():                                                              Ensure, that the attacking unit always wins.
settlersActionDoesNothing():                                                            Ensure, that the settler's action doesn't do anything.
unitsCannotMoveOverMountains():                                                         Ensure, that units cannot move over mountain tiles.
unitsCannotMoveOverOceans():                                                            Ensure, that units cannot move over ocean tiles.
produceUnitWhenProductionIsAcquired():                                                  Ensure, that a unit is produced when enough production has been acquired.
deduceUnitCostFromCitysTreasury():                                                      Ensure, that the unit’s cost is deducted from the city’s treasury of production.
playerMayChangeProductionToArcher():                                                    Ensure, that the player may change the produced unit to an archer.
playerMayChangeProductionToSettler():                                                   Ensure, that the player may change the produced unit to a settler.
changedUnitIsSpawned():                                                                 Ensure, that the spawned unit has changed.
placeUnitOnTopOfCityIfNoOtherUnitExists():                                              Ensure, that the unit is placed on top of the city when produced, and there are no other units on top of the city.
public void placeUnitToTheNorthIfThereIsAUnitOnTheCity():                               Ensure, that the unit is placed to the north of the city when produced, if there is another unit on top of the city.
public void playerRedCanConquerBluesCity():                                             Ensure, that players can conquer cities.

This is a list of test methods in the associated test TestBetaCiv:

between4000BCand100BC100yearsPassPerRound():                                            Ensure, that game age advances by 100 years when round ends, during the time the years are -4000 to -100
ensureAgeSequenceWorks():                                                               Ensure, that Around birth of Christ the sequence is -100, -1, +1, +50.
ensureBetween50ADAnd1750AD50YearsPass():                                                Ensure, that Between 50AD and 1750 50 years pass per round.
ensureBetween1750ADAnd1900AD25YearsPass():                                              Ensure, that Between 1750 and 1900 25 years pass per round.
ensureBetween1900ADAnd1970AD5YearsPass():                                               Ensure, that Between 1900 and 1970 5 years pass per round.
ensureAfter1970AD1YearPass():                                                           Ensure, that After 1970 1 years pass per round.
redConquersBlueCityAndWins():                                                           If player Red conquers blue's city, he wins.

This is a list of test methods in the associated test TestGammaCiv:

settlerCanFoundCity():                                                                  Ensure, that Settler can found city, and the owner is correct.
newCityPopulationSizeIsOne():                                                           Ensure, that the new City's population is 1.
settlerIsRemovedAfterFoundingACity():                                                   Ensure, that settler is removed from the world after creating a new city.
archersDoubleTheirDefensiveStrengthWhenFortifying():                                    Ensure, that archers can fortify and double their defensive strength.
unitsLoseMoveCountWhenMoving():                                                         Ensure, that units lose movecount when moving.
archersCannotMoveAfterFortifying():                                                     Ensure, that when archers fortify, they cannot move.

This  is a list of test methods in the associated test TestDeltaCiv:
redHasACityAt8Point12():                                                                Ensure, that Red has a city at (8,12)
blueHasACityAt4Point5():                                                                Ensure, that Blue has a city at (4,5)


This is a list of test methods in the associated test TestEpsilonCiv:
blueLegionsAttackWinIsCounted():                                                        Ensure, that the attack win counter for blue increases by 1 for each attack won.
blueAttacks3SettlersThatAreOnPlainsWhileLegionIsOnMountainAndWins():                    Ensure, that player blue wins when attacking 3 settlers.
noWinnerBefore3Wins():                                                                  Ensure, that there is no winner found before players have 3 wins.
defensesDontAddToVictory():                                                             Ensure, that defenses do not count towards victory.
ensureDefensiveStrengthIs12ForArcherAtCityOnForestWithARollOf6():                       Ensure, that the defensive strength is 12 for an archer at a city on a forest with a roll of 6.
ensureDefensiveStrengthIs40ForArcherAtCityOnForestWithARollOf4withAllyUnitFactorOf10(): Ensure, that the defensive strength is 40 for an archar at a city on a forest with a roll of 4 with an ally unit factor of 10.
ensureStrengthIs30ForArcherAtCityWith3NeighborsWithARollOf6():                          Ensure, that the attacking strength is 30 for an acher at a city with 3 neighbors getting a roll of 6.
attackFailsIfSettlerAttacksLegion():                                                    Ensure, that the attack fails, if a settler attacks a legion.